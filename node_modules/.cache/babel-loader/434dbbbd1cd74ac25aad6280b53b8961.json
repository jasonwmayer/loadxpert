{"ast":null,"code":"var _jsxFileName = \"/Users/jasonmayer/Workspace/load-xpert/src/containers/LoadPlanner/LoadPlanner.js\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport LoadPlanResults from './LoadPlanResults';\nimport LoadPlanSearchForm from './LoadPlanSearchForm';\nimport { WebAPIGetCall } from '../../actions/webapicalls';\nimport MillContext from '../../contexts/mill-context';\nimport { LoadPlanView } from './LoadPlanView';\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    component: \"div\",\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-auto-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-auto-tab-${index}`\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    p: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, children));\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction LoadPlanner() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [tabs, setTabs] = React.useState([]); //const {mills,dispatch} = useContext(MillContext);\n\n  const {\n    progressDispatch\n  } = useContext(MillContext);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleCheckBoxClick = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleViewLoadPlan = (loadplanid, loadplanname) => {\n    //console.log(\"handleViewLoadPlan \"+loadplanid+\" \"+loadplanname);\n    const tabcount = tabs.length;\n    let response = undefined;\n\n    async function InvokeAsync() {\n      response = await WebAPIGetCall(`LoadPlanViewer/GetLoadPlanDetails/${loadplanid}`, progressDispatch);\n    }\n\n    InvokeAsync().then(() => {\n      setTabs([...tabs, {\n        label: loadplanname,\n        tabData: { ...response\n        }\n      }]);\n      setValue(tabcount + 1);\n    });\n  };\n\n  const handleTabClose = loadplanname => {\n    setTabs([...tabs.filter(tab => tab.label !== loadplanname)]);\n    setValue(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: value,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    variant: \"scrollable\",\n    scrollButtons: \"auto\",\n    \"aria-label\": \"scrollable auto tabs example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, Object.assign({\n    label: \"Open Load Plans\"\n  }, a11yProps(0), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })), tabs.map((tab, index) => {\n    return /*#__PURE__*/React.createElement(Tab, Object.assign({\n      key: tab.label,\n      label: tab.label\n    }, a11yProps({\n      index\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(TabPanel, {\n    value: value,\n    index: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadPlanSearchForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LoadPlanResults, {\n    handleCheckBoxClick: handleCheckBoxClick,\n    handleViewLoadPlan: handleViewLoadPlan,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), tabs.map((tab, index) => {\n    return /*#__PURE__*/React.createElement(TabPanel, {\n      key: tab.label,\n      value: value,\n      index: index + 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(LoadPlanView, {\n      tabData: tab.tabData,\n      handleTabClose: handleTabClose,\n      label: tab.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }));\n  }));\n}\n\nexport default LoadPlanner;","map":{"version":3,"sources":["/Users/jasonmayer/Workspace/load-xpert/src/containers/LoadPlanner/LoadPlanner.js"],"names":["React","useContext","PropTypes","makeStyles","AppBar","Tabs","Tab","Typography","Box","LoadPlanResults","LoadPlanSearchForm","WebAPIGetCall","MillContext","LoadPlanView","TabPanel","props","children","value","index","other","propTypes","node","any","isRequired","a11yProps","id","useStyles","theme","root","flexGrow","width","backgroundColor","palette","background","paper","LoadPlanner","classes","setValue","useState","tabs","setTabs","progressDispatch","handleChange","event","newValue","handleCheckBoxClick","handleViewLoadPlan","loadplanid","loadplanname","tabcount","length","response","undefined","InvokeAsync","then","label","tabData","handleTabClose","filter","tab","map"],"mappings":"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","sourcesContent":["import React,{useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport LoadPlanResults from './LoadPlanResults';\nimport LoadPlanSearchForm from './LoadPlanSearchForm';\nimport {WebAPIGetCall} from '../../actions/webapicalls';\nimport MillContext from '../../contexts/mill-context';\nimport {LoadPlanView} from './LoadPlanView';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction LoadPlanner() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [tabs, setTabs] = React.useState([]);\n\n  //const {mills,dispatch} = useContext(MillContext);\n  const {progressDispatch} = useContext(MillContext);\n\n  const handleChange = (event, newValue) => {\n      setValue(newValue);\n  };\n  const handleCheckBoxClick = (event, newValue) => {\n    setValue(newValue);\n  };\n  \n  const handleViewLoadPlan = (loadplanid,loadplanname) => {\n    //console.log(\"handleViewLoadPlan \"+loadplanid+\" \"+loadplanname);\n\n    const tabcount =tabs.length;\n\n    let response = undefined;\n    async function InvokeAsync(){\n      response = await WebAPIGetCall(`LoadPlanViewer/GetLoadPlanDetails/${loadplanid}`,progressDispatch);\n    }\n    InvokeAsync().then(() => {\n      setTabs([...tabs,\n        {\n          label:loadplanname,\n          tabData:{\n            ...response\n          }\n        }\n      ]);\n      setValue(tabcount+1);\n    });\n      \n  }\n\n  const handleTabClose = (loadplanname) =>{\n    setTabs([...tabs.filter(tab=> tab.label!== loadplanname)]);\n    setValue(0);\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange} \n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Open Load Plans\" {...a11yProps(0)} />\n\n          {tabs.map((tab,index)=>{\n            return (<Tab key={tab.label} label={tab.label} {...a11yProps({index})} />)\n          })}\n\n         </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n\n        <LoadPlanSearchForm />      \n        <LoadPlanResults handleCheckBoxClick={handleCheckBoxClick} handleViewLoadPlan={handleViewLoadPlan} />\n      </TabPanel>\n\n       \n      {tabs.map((tab,index)=>{\n          \n            return (\n              <TabPanel key={tab.label} value={value} index={index+1}>\n              <LoadPlanView tabData={tab.tabData} handleTabClose={handleTabClose} label={tab.label}/>\n              </TabPanel> \n            )\n      })}\n   \n    </div>\n  );\n}\n\n\nexport default LoadPlanner;"]},"metadata":{},"sourceType":"module"}