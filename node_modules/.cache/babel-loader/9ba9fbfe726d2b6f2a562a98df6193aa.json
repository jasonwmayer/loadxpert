{"ast":null,"code":"import 'whatwg-fetch';\nconst HOST = 'http://ms00015080d';\nconst BASE = `http://${HOST}:8080/api`;\n\nconst request = (method, url) => {\n  url = `${BASE}${url}`;\n\n  const parsePayload = json => {\n    if (json && json.code === 0 && json.message === 'success') {\n      if (json.data === undefined) {\n        return {};\n      } else {\n        return json.data;\n      }\n    } else if (json) {\n      throw new Error({\n        message: json.message,\n        code: json.code\n      });\n    } else {\n      throw new Error(json);\n    }\n  };\n\n  const handleResponse = (resolve, reject) => {\n    return json => {\n      try {\n        resolve(parsePayload(json));\n      } catch (e) {\n        reject(e);\n      }\n    };\n  };\n\n  const createResponseError = error => {\n    const errText = error.statusText || '';\n    const errorObj = new Error(errText);\n    errorObj.response = error;\n    return errorObj;\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(url).then(response => {\n      if (response.ok) return response.json();\n      throw createResponseError(response);\n    }).then(handleResponse(resolve, reject)).catch(reject);\n  });\n}; // HELPER FUNCTIONS\n\n\nconst get = (url, body) => request('GET', url, body);\n\nconst post = (url, body) => {\n  return request('POST', url, body);\n}; // API CALLS\n\n\nexport const fetchMillsList = () => get(`/userpreferences/mill/fhenao`);\nexport const fetchLoadPlanDetails = loadplanid => get(`/LoadPlanViewer/GetLoadPlanDetails/${loadplanid}`);\nexport const postUserPreferences = () => post(`/userpreferences/mill/`);\nexport const populateSearchResults = (mode, mill, searchcondition, loadplanname) => get(`Query/SearchLoadPlans/${mode}/${mill}/${searchcondition}/${loadplanname}`);","map":{"version":3,"sources":["/Users/jasonmayer/Workspace/load-xpert/src/api.js"],"names":["HOST","BASE","request","method","url","parsePayload","json","code","message","data","undefined","Error","handleResponse","resolve","reject","e","createResponseError","error","errText","statusText","errorObj","response","Promise","fetch","then","ok","catch","get","body","post","fetchMillsList","fetchLoadPlanDetails","loadplanid","postUserPreferences","populateSearchResults","mode","mill","searchcondition","loadplanname"],"mappings":"AAAA,OAAO,cAAP;AAEA,MAAMA,IAAI,GAAI,oBAAd;AACA,MAAMC,IAAI,GAAI,UAASD,IAAK,WAA5B;;AAEA,MAAME,OAAO,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAE/BA,EAAAA,GAAG,GAAI,GAAEH,IAAK,GAAEG,GAAI,EAApB;;AAEA,QAAMC,YAAY,GAAGC,IAAI,IAAI;AAC3B,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,CAAtB,IAA2BD,IAAI,CAACE,OAAL,KAAiB,SAAhD,EAA2D;AACzD,UAAIF,IAAI,CAACG,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAOJ,IAAI,CAACG,IAAZ;AACD;AACF,KAND,MAMO,IAAIH,IAAJ,EAAU;AACf,YAAM,IAAIK,KAAJ,CAAU;AAAEH,QAAAA,OAAO,EAAEF,IAAI,CAACE,OAAhB;AAAyBD,QAAAA,IAAI,EAAED,IAAI,CAACC;AAApC,OAAV,CAAN;AACD,KAFM,MAEA;AACL,YAAM,IAAII,KAAJ,CAAUL,IAAV,CAAN;AACD;AACF,GAZD;;AAcA,QAAMM,cAAc,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,WAAOR,IAAI,IAAI;AACb,UAAI;AACHO,QAAAA,OAAO,CAACR,YAAY,CAACC,IAAD,CAAb,CAAP;AACA,OAFD,CAEE,OAAOS,CAAP,EAAU;AACXD,QAAAA,MAAM,CAACC,CAAD,CAAN;AACA;AACF,KAND;AAOD,GARD;;AAUA,QAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,UAAMC,OAAO,GAAGD,KAAK,CAACE,UAAN,IAAoB,EAApC;AACA,UAAMC,QAAQ,GAAG,IAAIT,KAAJ,CAAUO,OAAV,CAAjB;AACAE,IAAAA,QAAQ,CAACC,QAAT,GAAoBJ,KAApB;AACA,WAAOG,QAAP;AACD,GALD;;AAOA,SAAO,IAAIE,OAAJ,CAAY,CAACT,OAAD,EAAUC,MAAV,KAAqB;AACtCS,IAAAA,KAAK,CAACnB,GAAD,CAAL,CACGoB,IADH,CACQH,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACI,EAAb,EAAiB,OAAOJ,QAAQ,CAACf,IAAT,EAAP;AACjB,YAAMU,mBAAmB,CAACK,QAAD,CAAzB;AACD,KAJH,EAKGG,IALH,CAKQZ,cAAc,CAACC,OAAD,EAAUC,MAAV,CALtB,EAMGY,KANH,CAMSZ,MANT;AAOD,GARM,CAAP;AASD,CA5CD,C,CA8CA;;;AACA,MAAMa,GAAG,GAAG,CAACvB,GAAD,EAAMwB,IAAN,KAAe1B,OAAO,CAAC,KAAD,EAAQE,GAAR,EAAawB,IAAb,CAAlC;;AACA,MAAMC,IAAI,GAAG,CAACzB,GAAD,EAAMwB,IAAN,KAAe;AAC1B,SAAO1B,OAAO,CAAC,MAAD,EAASE,GAAT,EAAcwB,IAAd,CAAd;AACD,CAFD,C,CAKA;;;AACA,OAAO,MAAME,cAAc,GAAG,MAAMH,GAAG,CAAE,8BAAF,CAAhC;AACP,OAAO,MAAMI,oBAAoB,GAAIC,UAAD,IAAgBL,GAAG,CAAE,sCAAqCK,UAAW,EAAlD,CAAhD;AACP,OAAO,MAAMC,mBAAmB,GAAG,MAAMJ,IAAI,CAAE,wBAAF,CAAtC;AACP,OAAO,MAAMK,qBAAqB,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,eAAb,EAA8BC,YAA9B,KAA+CX,GAAG,CAAE,yBAAwBQ,IAAK,IAAGC,IAAK,IAAGC,eAAgB,IAAGC,YAAa,EAA1E,CAAhF","sourcesContent":["import 'whatwg-fetch';\n\nconst HOST =  'http://ms00015080d';\nconst BASE = `http://${HOST}:8080/api`;\n\nconst request = (method, url) => {\n\n  url = `${BASE}${url}`;\n\n  const parsePayload = json => {\n    if (json && json.code === 0 && json.message === 'success') {\n      if (json.data === undefined) {\n        return {};\n      } else {\n        return json.data;\n      }\n    } else if (json) {\n      throw new Error({ message: json.message, code: json.code });\n    } else {\n      throw new Error(json);\n    }\n  };\n\n  const handleResponse = (resolve, reject) => {\n    return json => {\n      try {\n       resolve(parsePayload(json));\n      } catch (e) {\n       reject(e);\n      }\n    };\n  };\n\n  const createResponseError = error => {\n    const errText = error.statusText || '';\n    const errorObj = new Error(errText);\n    errorObj.response = error;\n    return errorObj;\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(response => {\n        if (response.ok) return response.json();\n        throw createResponseError(response);\n      })\n      .then(handleResponse(resolve, reject))\n      .catch(reject);\n  });\n};\n\n// HELPER FUNCTIONS\nconst get = (url, body) => request('GET', url, body);\nconst post = (url, body) => {\n  return request('POST', url, body);\n};\n\n\n// API CALLS\nexport const fetchMillsList = () => get(`/userpreferences/mill/fhenao`);\nexport const fetchLoadPlanDetails = (loadplanid) => get(`/LoadPlanViewer/GetLoadPlanDetails/${loadplanid}`)\nexport const postUserPreferences = () => post(`/userpreferences/mill/`);\nexport const populateSearchResults = (mode, mill, searchcondition, loadplanname) => get(`Query/SearchLoadPlans/${mode}/${mill}/${searchcondition}/${loadplanname}`) \n\n\n"]},"metadata":{},"sourceType":"module"}